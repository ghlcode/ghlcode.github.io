import{_ as e,c as o,a as s,b as a,d as t,e as l,o as i,r as c}from"./app-DVyU65El.js";const u={},r={href:"https://doc.xugaoyi.com/",target:"_blank",rel:"noopener noreferrer"},k={href:"notion://www.notion.so/%27https://vuepress-theme-reco.recoluan.com/%27",target:"_blank",rel:"noopener noreferrer"},d={href:"https://vuepress-theme-reco.recoluan.com/views/1.x/sidebar.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://v1.vuepress.vuejs.org/zh/theme/default-theme-config.html#%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%88%86%E7%BB%84",target:"_blank",rel:"noopener noreferrer"},v={href:"https://hejunlan.gitee.io/document/other/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%A4%9A%E4%B8%AA%E4%BE%A7%E8%BE%B9%E6%A0%8F.html",target:"_blank",rel:"noopener noreferrer"};function b(g,n){const p=c("ExternalLinkIcon");return i(),o("div",null,[s("p",null,[n[2]||(n[2]=a("最近将博客主题由")),s("a",r,[n[0]||(n[0]=s("code",null,"vdoing",-1)),t(p)]),n[3]||(n[3]=a("换成了")),s("a",k,[n[1]||(n[1]=s("code",null,"reco",-1)),t(p)]),n[4]||(n[4]=a(",但是")),n[5]||(n[5]=s("code",null,"reco",-1)),n[6]||(n[6]=a("本身不能够自动生成左边的侧边栏，根据作者的说明，还是可以自己生成侧边栏的。本着懒的原则，我写了一个Python脚本在每次编译的时候自动生成相应的侧边栏。同时还有一个脚本为每一篇文章自动生成永久链接。详情见：自动生成文章永久链接"))]),n[14]||(n[14]=l(`<p>废话少说，上代码:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> glob</span>
<span class="line"><span class="token keyword">import</span> os</span>
<span class="line"></span>
<span class="line">seiderbarPath <span class="token operator">=</span> <span class="token string">&#39;docs\\.vuepress\\config\\sidebar.js&#39;</span></span>
<span class="line">docsPath <span class="token operator">=</span> <span class="token string">r&#39;docs&#39;</span></span>
<span class="line">docsList <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>docsPath<span class="token punctuation">}</span></span><span class="token string">/**/*.md&#39;</span></span><span class="token punctuation">,</span> recursive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> doc <span class="token keyword">in</span> docsList<span class="token punctuation">:</span></span>
<span class="line">    path<span class="token punctuation">,</span> filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>doc<span class="token punctuation">)</span></span>
<span class="line">    name<span class="token punctuation">,</span> _ <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>filename<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> filename <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;README.md&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>os<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> temp<span class="token punctuation">:</span></span>
<span class="line">        temp<span class="token punctuation">[</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>os<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>filename<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        temp<span class="token punctuation">[</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>os<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>seiderbarPath<span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">&#39;ignore&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;module.exports = {\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> p <span class="token keyword">in</span> temp<span class="token punctuation">:</span></span>
<span class="line">        title <span class="token operator">=</span> p<span class="token punctuation">.</span>split<span class="token punctuation">(</span>os<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;\\t&#39;/</span><span class="token interpolation"><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span><span class="token string">/&#39;: [\\n&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> c <span class="token keyword">in</span> temp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;\\t\\t&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token string">&#39;,\\n&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;\\t],\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[10]||(n[10]=a("参考文章:")),n[11]||(n[11]=s("br",null,null,-1)),s("a",d,[n[7]||(n[7]=a("侧边栏 | vuepress-theme-reco")),t(p)]),n[12]||(n[12]=s("br",null,null,-1)),s("a",m,[n[8]||(n[8]=a("侧边栏分组 | VuePress")),t(p)]),n[13]||(n[13]=s("br",null,null,-1)),s("a",v,[n[9]||(n[9]=a("自动生成多个侧边栏")),t(p)])])])}const w=e(u,[["render",b],["__file","6678d6.html.vue"]]),h=JSON.parse('{"path":"/blog/6678d6.html","title":"自动添加侧边栏","lang":"en-US","frontmatter":{"title":"自动添加侧边栏","date":"2022/10/14","permalink":"/blog/6678d6.html","categories":["blog"],"tags":["blog"]},"headers":[],"git":{"createdTime":1732191603000,"updatedTime":1732191603000,"contributors":[{"name":"Ghlerrix","email":"Ghlerrix@outlook.com","commits":1}]},"filePathRelative":"blogs/blog/自动添加侧边栏.md"}');export{w as comp,h as data};
