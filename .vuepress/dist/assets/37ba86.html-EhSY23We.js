import{_ as t,c as e,e as l,a as s,b as a,d as o,o as c,r as i}from"./app-DVyU65El.js";const u={},r={href:"https://github.com/xuhuasheng/mmdetection_plot_pr_curve",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const p=i("ExternalLinkIcon");return c(),e("div",null,[n[2]||(n[2]=l(`<p>发现直接使用<code>matplotlib</code>绘制曲线在修改图片上一些细节是比较麻烦，因此我决定使用Excel来绘制PR曲线</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">import</span> mmcv</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> pycocotools<span class="token punctuation">.</span>coco <span class="token keyword">import</span> COCO</span>
<span class="line"><span class="token keyword">from</span> pycocotools<span class="token punctuation">.</span>cocoeval <span class="token keyword">import</span> COCOeval</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> mmcv <span class="token keyword">import</span> Config</span>
<span class="line"><span class="token keyword">from</span> mmdet<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> build_dataset</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">getPrecisions</span><span class="token punctuation">(</span>config_file<span class="token punctuation">,</span> result_file<span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">&quot;bbox&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;plot precison-recall curve based on testing results of pkl file.</span>
<span class="line"></span>
<span class="line">        Args:</span>
<span class="line">            config_file (list[list | tuple]): config file path.</span>
<span class="line">            result_file (str): pkl file of testing results path.</span>
<span class="line">            metric (str): Metrics to be evaluated. Options are</span>
<span class="line">                &#39;bbox&#39;, &#39;segm&#39;.</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    cfg <span class="token operator">=</span> Config<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span>config_file<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># turn on test mode of dataset</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>test_mode <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">    <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">for</span> ds_cfg <span class="token keyword">in</span> cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">:</span></span>
<span class="line">            ds_cfg<span class="token punctuation">.</span>test_mode <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># build dataset</span></span>
<span class="line">    dataset <span class="token operator">=</span> build_dataset<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># load result file in pkl format</span></span>
<span class="line">    pkl_results <span class="token operator">=</span> mmcv<span class="token punctuation">.</span>load<span class="token punctuation">(</span>result_file<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># convert pkl file (list[list | tuple | ndarray]) to json</span></span>
<span class="line">    json_results<span class="token punctuation">,</span> _ <span class="token operator">=</span> dataset<span class="token punctuation">.</span>format_results<span class="token punctuation">(</span>pkl_results<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># initialize COCO instance</span></span>
<span class="line">    coco <span class="token operator">=</span> COCO<span class="token punctuation">(</span>annotation_file<span class="token operator">=</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>ann_file<span class="token punctuation">)</span></span>
<span class="line">    coco_gt <span class="token operator">=</span> coco</span>
<span class="line">    coco_dt <span class="token operator">=</span> coco_gt<span class="token punctuation">.</span>loadRes<span class="token punctuation">(</span>json_results<span class="token punctuation">[</span>metric<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># initialize COCOeval instance</span></span>
<span class="line">    coco_eval <span class="token operator">=</span> COCOeval<span class="token punctuation">(</span>coco_gt<span class="token punctuation">,</span> coco_dt<span class="token punctuation">,</span> metric<span class="token punctuation">)</span></span>
<span class="line">    coco_eval<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    coco_eval<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    coco_eval<span class="token punctuation">.</span>summarize<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">    precisions[T, R, K, A, M]</span>
<span class="line">    T: iou thresholds [0.5 : 0.05 : 0.95], idx from 0 to 9</span>
<span class="line">    R: recall thresholds [0 : 0.01 : 1], idx from 0 to 100</span>
<span class="line">    K: category, idx from 0 to ...</span>
<span class="line">    A: area range, (all, small, medium, large), idx from 0 to 3</span>
<span class="line">    M: max dets, (1, 10, 100), idx from 0 to 2</span>
<span class="line">    &#39;&#39;&#39;</span></span>
<span class="line">    <span class="token keyword">return</span> coco_eval<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">[</span><span class="token string">&quot;precision&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">PR</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> result<span class="token punctuation">,</span> out<span class="token punctuation">,</span> thr<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Export PR Excel data</span>
<span class="line"></span>
<span class="line">        Args:</span>
<span class="line">            config_file (list[list | tuple]): config file path.</span>
<span class="line">            result_file (str): pkl file of testing results path.</span>
<span class="line">            out (str): path of excel file</span>
<span class="line">            thr(float): output PR Threshold. Optional range: {-1, [0.5, 0.95]}</span>
<span class="line">                If thr == -1: Threshold is 0.5-0.95</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    precisions <span class="token operator">=</span> getPrecisions<span class="token punctuation">(</span>config<span class="token punctuation">,</span> result<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    recall <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.01</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> thr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">        mAP_all_pr <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>precisions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        T <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>thr <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0.05</span><span class="token punctuation">)</span></span>
<span class="line">        mAP_all_pr <span class="token operator">=</span> precisions<span class="token punctuation">[</span>T<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    data <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>recall<span class="token punctuation">,</span> mAP_all_pr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>mAP_all_pr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>out<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[1]||(n[1]=a("参考：")),s("a",r,[n[0]||(n[0]=a("https://github.com/xuhuasheng/mmdetection_plot_pr_curve")),o(p)])])])}const v=t(u,[["render",d],["__file","37ba86.html.vue"]]),b=JSON.parse('{"path":"/pages/37ba86.html","title":"mmdetection绘制PR曲线","lang":"en-US","frontmatter":{"title":"mmdetection绘制PR曲线","date":"2022/05/12","permalink":"/pages/37ba86.html","categories":["mmdetection"],"tags":["mmdetection"]},"headers":[],"git":{"createdTime":1732191603000,"updatedTime":1732191603000,"contributors":[{"name":"Ghlerrix","email":"Ghlerrix@outlook.com","commits":1}]},"filePathRelative":"blogs/mmdetection/mmdetection绘制PR曲线.md"}');export{v as comp,b as data};
